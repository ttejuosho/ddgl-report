<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="apple-touch-icon" sizes="76x76" href="/assets/img/apple-icon.png">
  <link rel="icon" type="image/png" href="/assets/img/favicon.png">
  <title>SurvEnEEr</title>
  <!--     Fonts and icons     -->
  <link href="https://fonts.googleapis.com/css?family=Poppins:200,300,400,600,700,800" rel="stylesheet" />
  <link href="https://use.fontawesome.com/releases/v5.0.6/css/all.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.2/animate.min.css" rel="stylesheet">
  <!-- Nucleo Icons -->
  <link href="/assets/css/nucleo-icons.css" rel="stylesheet" />
  <link href="/assets/css/Chart.min.css" rel="stylesheet" />
  <link href="/assets/css/datatables.min.css" rel="stylesheet" />
  <link href="/assets/css/selectize.css" rel="stylesheet" />
  <!-- CSS Files -->
  <link href="/assets/css/black-dashboard.css?v=1.0.0" rel="stylesheet" />
  <!-- CSS Just for demo purpose, don't include it in your project -->
  <link href="/assets/demo/demo.css" rel="stylesheet" />
  <!--   Core JS Files   -->
  <script src="/assets/js/core/jquery.min.js"></script>
  <script src="/assets/js/core/popper.min.js"></script>
  <script src="/assets/js/core/bootstrap.min.js"></script>
  <script src="/assets/js/plugins/perfect-scrollbar.jquery.min.js"></script>
  <script src="/assets/js/socket.io.js"></script>
  {{!-- <script src="http://surveneer.herokuapp.com/assets/js/socket.io.js"></script> --}}
  <!-- Chart JS -->
  <script src="/assets/js/plugins/chartjs.min.js"></script>
  <!--  Notifications Plugin    -->
  <script src="/assets/js/plugins/bootstrap-notify.js"></script>
  <!-- Control Center for Black Dashboard: parallax effects, scripts for the example pages etc -->
  <script src="/assets/js/black-dashboard.min.js?v=1.0.0"></script>
  <script type="text/javascript" src="/assets/js/selectize.js"></script>
  {{!-- <script type="text/javascript" src="/assets/js/Chart.min.js"></script> --}}
  <script type="text/javascript" src="/assets/js/DataTables/datatables.min.js"></script>
  <script type="text/javascript" src="/assets/js/app.js"></script>
  <!-- Black Dashboard DEMO methods, don't include it in your project! -->
  <script src="/assets/demo/demo.js"></script>
</head>
<body>
    <center>
        <div class="col-md-10">
            <div class="card card-nav-tabs">
                <div class="card-header card-header-success">
                    Completed !!
                </div>
                <div class="card-body">
                    <blockquote class="blockquote mb-0 pt-2 pb-2">
                        {{#if postSurveyInstructions}}
                            <h5>{{postSurveyInstructions}}</h5>
                        {{else}}
                            <h5>Thank you for your time !!! We got your responses.</h5>
                        {{/if}}
                    </blockquote>
                    <input type="hidden" id="surveyId" value="{{surveyId}}">
                    <input type="hidden" id="resId" value="{{resId}}">
                    <input type="hidden" id="userId" value="{{userId}}">
                </div>
            </div>
        </div>
    </center>
</body>
</html>

<script type="text/javascript">
$(document).ready(function(){

     function randomStr(len, arr) { 
            var ans = ''; 
            for (var i = len; i > 0; i--) { 
                ans +=  
                  arr[Math.floor(Math.random() * arr.length)]; 
            } 
            return ans; 
        }

    const socket = io();
    const surveyId = $('#surveyId').val();
    const resId = $('#resId').val();
    const userId = $('#userId').val();
    fetch('/api/getResponse/' + surveyId + '/' + resId).then((res)=>{
        return res.json();
    }).then((data) => {
        var randomString = '8xDq4A';
        var responseClass = randomStr(6, randomString);
        var html = '<div id="accordion" role="tablist" aria-multiselectable="true" class="card-collapse">' +   
                        '<div class="card card-plain mb-0">' +
                            '<div class="card-header" role="tab" id="headingOne"'+ responseClass +'>' +
                                '<a data-toggle="collapse" data-parent="#accordion" href="#collapseOne'+ responseClass +'" aria-expanded="false" aria-controls="collapseOne'+ responseClass +'" class="collapsed">' +
                                    data[1][0].Respondent.respondentName +
                                    '<i class="tim-icons icon-minimal-up"></i>' +
                                '</a>' +
                            '</div>' +
                            '<div id="collapseOne'+ responseClass +'" class="collapse" role="tabpanel" aria-labelledby="headingOne'+ responseClass +'" style="">' +
                                '<div id="Respondent0" class="card-body">' +
                                    '<h5><span class="title mr-1">Phone Number: </span>'+ data[1][0].Respondent.respondentPhone +'</h5>' +
                                    '<h5><span class="title mr-1">Email Address: </span>'+ data[1][0].Respondent.respondentEmail +'</h5>' +
                                    '<div class="row">' +
                                        '<div class="col-md-6 pr-md-1">';
                                            data[1].forEach((q)=>{
                                                html += '<h5>' + q.Question.question + '</h5>';
                                            });       
                                        html += '</div>' + 
                                        '<div class="col-md-6 pr-md-1">'; 
                                            data[1].forEach((a)=>{
                                                html += '<h5>' + a.answer + '</h5>';
                                            });
                                        html += '</div>' +
                                    '</div>' +
                                '</div>' +
                            '</div>' +
                        '</div>' +
                    '</div>';
        // Emit User Id along with message
        var socketData = { message: data[0][0].RespondentCount, domData: html, room: userId, chartData: [] };
        data[1].forEach((d, i)=>{
            if(d.Question.optionType === 'YesNo'){
                socketData.chartData.push([parseInt(d.Question.YesResponseCount), parseInt(d.Question.NoResponseCount)]);
            } else if (d.Question.optionType === 'TrueFalse'){
                socketData.chartData.push([parseInt(d.Question.TrueResponseCount), parseInt(d.Question.FalseResponseCount)]);
            } else if (d.Question.optionType === 'LikertAgreement'){
                socketData.chartData.push([
                parseInt(d.Question.StronglyDisagreeResponseCount),
                parseInt(d.Question.DisagreeResponseCount),
                parseInt(d.Question.UndecidedResponseCount),
                parseInt(d.Question.AgreeResponseCount),
                parseInt(d.Question.StronglyAgreeResponseCount)
                ]);
            } else if (d.Question.optionType === 'LikertQuality'){
                socketData.chartData.push([
                parseInt(d.Question.VeryGoodResponseCount),
                parseInt(d.Question.GoodResponseCount),
                parseInt(d.Question.AcceptableResponseCount),
                parseInt(d.Question.PoorResponseCount),
                parseInt(d.Question.VeryPoorResponseCount)
                ]);
            } else if (d.Question.optionType === 'LikertValue'){
                socketData.chartData.push([
                parseInt(d.Question.VeryHighResponseCount),
                parseInt(d.Question.HighResponseCount),
                parseInt(d.Question.ModerateResponseCount),
                parseInt(d.Question.LowResponseCount),
                parseInt(d.Question.NoneResponseCount)
                ]);
            } else if (d.Question.optionType === 'LikertFrequency'){
                socketData.chartData.push([
                parseInt(d.Question.VeryFrequentlyResponseCount),
                parseInt(d.Question.FrequentlyResponseCount),
                parseInt(d.Question.OccasionallyResponseCount),
                parseInt(d.Question.RarelyResponseCount),
                parseInt(d.Question.NeverResponseCount)
                ]);
            } else if (d.Question.optionType === 'LikertImportance'){
                socketData.chartData.push([
                parseInt(d.Question.VeryImportantResponseCount),
                parseInt(d.Question.ImportantResponseCount),
                parseInt(d.Question.ModeratelyImportantResponseCount),
                parseInt(d.Question.SlightlyImportantResponseCount),
                parseInt(d.Question.NotImportantResponseCount)
                ]);
            } else if (d.Question.optionType === 'MultipleChoice'){
                socketData.chartData.push([
                parseInt(d.Question.option1ResponseCount),
                parseInt(d.Question.option2ResponseCount),
                parseInt(d.Question.option3ResponseCount),
                parseInt(d.Question.option4ResponseCount)
                ]);
            } else if (d.Question.optionType === 'StarRating'){
                socketData.chartData.push([
                parseInt(d.Question.Star5ResponseCount),
                parseInt(d.Question.Star4ResponseCount),
                parseInt(d.Question.Star3ResponseCount),
                parseInt(d.Question.Star2ResponseCount),
                parseInt(d.Question.Star1ResponseCount)
                ]);
            } else if (d.Question.optionType === 'NumberRating'){
                socketData.chartData.push([
                parseInt(d.Question.Number5ResponseCount),
                parseInt(d.Question.Number4ResponseCount),
                parseInt(d.Question.Number3ResponseCount),
                parseInt(d.Question.Number2ResponseCount),
                parseInt(d.Question.Number1ResponseCount)
                ]);
            }
        });
        socket.emit('response', socketData);
    });
});
</script>